# 1. Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: my-namespace
---
# 2. ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-config
  namespace: my-namespace
data:
  APP_MODE: "production"
---
# 3. Secret
apiVersion: v1
kind: Secret
metadata:
  name: my-secret
  namespace: my-namespace
type: Opaque
data:
  DB_PASSWORD: bXlwYXNzd29yZA== # "mypassword" base64 encoded
---
# 4. Deployment (Manages Pods + ReplicaSet)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
  namespace: my-namespace
spec:
  replicas: 2
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
      - name: nginx-container
        image: nginx
        ports:
        - containerPort: 80
        env:
        - name: APP_MODE
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: APP_MODE
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: DB_PASSWORD
---
# 5. Service (Expose Pods inside cluster)
apiVersion: v1
kind: Service
metadata:
  name: my-service
  namespace: my-namespace
spec:
  selector:
    app: myapp
  ports:
  - port: 80
    targetPort: 80
---
# 6. Ingress (Expose Service to outside world)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  namespace: my-namespace
spec:
  rules:
  - host: myapp.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-service
            port:
              number: 80
---
# 7. StatefulSet (optional: example if app needs storage)
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: my-statefulset
  namespace: my-namespace
spec:
  serviceName: "stateful-service"
  replicas: 1
  selector:
    matchLabels:
      app: mystatefulapp
  template:
    metadata:
      labels:
        app: mystatefulapp
    spec:
      containers:
      - name: nginx
        image: nginx
---
# 8. DaemonSet (run on every node)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-daemonset
  namespace: my-namespace
spec:
  selector:
    matchLabels:
      app: mydaemon
  template:
    metadata:
      labels:
        app: mydaemon
    spec:
      containers:
      - name: daemon-container
        image: busybox
        command: [ "sh", "-c", "while true; do echo Hello from DaemonSet; sleep 3600; done" ]
---
# 9. Job (one-time execution Pod)
apiVersion: batch/v1
kind: Job
metadata:
  name: my-job
  namespace: my-namespace
spec:
  template:
    spec:
      containers:
      - name: job-container
        image: busybox
        command: [ "echo", "Hello from Job" ]
      restartPolicy: Never
---
# 10. CronJob (scheduled execution Pod)
apiVersion: batch/v1
kind: CronJob
metadata:
  name: my-cronjob
  namespace: my-namespace
spec:
  schedule: "*/5 * * * *" # Every 5 minutes
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cronjob-container
            image: busybox
            command: [ "echo", "Hello from CronJob" ]
          restartPolicy: OnFailure
